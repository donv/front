#!/bin/bash
#
# front      Startup script for the KC front application
#
# chkconfig: 345 88 12
# description: KC front web application
# pidfile: /u/apps/$APP/shared/pids/server.pid

. /etc/rc.d/init.d/functions

APP=front
PORT=3003
RAILS_ENV=production
RUN_AS_USER=capistrano
PID_FILE="/u/apps/$APP/shared/pids/server.pid"
APP_DIR="/u/apps/$APP/current"
LOG_DIR="/u/apps/$APP/shared/log"
GC_OPTS="-J-verbose:gc -J-XX:+PrintGCTimeStamps -J-XX:+PrintGCDateStamps -J-Xloggc:${LOG_DIR}/gc.log"
export JRUBY_OPTS="${GC_OPTS} -J-Xmx2G --server -J-Djava.awt.headless=true -J-Dawt.toolkit=sun.awt.HToolkit"
START_CMD="bundle exec puma --dir $APP_DIR -e $RAILS_ENV -p $PORT -t 4:20 -d --pidfile $PID_FILE"

USER=`whoami`
if [ "$USER" != "$RUN_AS_USER" ]; then
  echo Running as $USER.  Switching to $RUN_AS_USER...
  su - $RUN_AS_USER -c "$0 $*"
  exit $?
fi

mkdir -p `dirname $PID_FILE`

source /etc/profile

cd $APP_DIR
if [ -z "ruby" ] ; then
  echo "Could not find ruby on your path."
  exit 1
fi
ruby --version

function start() {
  if [[ -s $PID_FILE && -n "$(ps -A | grep "^[ \t]*$(< $PID_FILE)")" ]] ; then
    PID=$(< $PID_FILE)
    echo "$APP already running with pid $PID."
    cp public/503_down.html public/503.html
    exit 1
  fi
  rm -f $PID_FILE

  echo -n "Starting $APP"
  setsid $START_CMD >$LOG_DIR/stdout.log 2>&1 &

  PID="$!"

  echo -n " (${PID}): "

  for i in {1..70} ; do
    if [[ -s $PID_FILE ]] ; then
      PID=$(< $PID_FILE)
      break
    fi
    if (( $i % 10 == 0 )) ; then
      echo -n $i
    else
      echo -n .
    fi
    sleep 1
  done

  if [[ -s $PID_FILE ]] ; then
    echo OK
  else
    echo FAILED
    echo $PID > $PID_FILE
    echo "Retrying..."
    restart
    exit $?
  fi
  echo "$APP started with pid=$PID"

  for j in {1..60} ; do
    if (exec >/dev/null 2>&1 6<>/dev/tcp/127.0.0.1/$PORT) ; then
      server_responded=1
      break
    fi
    if (( $j == 1 )) ; then
      echo -n 'Waiting for server to respond...'
    else
      echo -n .
    fi
    if (( $j > 3 )) ; then
      if (( $j % 10 == 0 )) ; then
        echo -n $j
      else
        echo -n .
      fi
    fi
    sleep 1
  done
  if [[ "$server_responded" == 1 ]]; then
    if (( $j > 1 )) ; then
      echo OK
    fi
  else
    echo FAILED
  fi
  cp public/503_down.html public/503.html
}

function stop() {
  cp public/503_update.html public/503.html
  if [[ ! -s "$PID_FILE" ]] ; then
    echo "$APP is not currently running."
  elif [[ -z "$(ps -A | grep "^[ \t]*$(< $PID_FILE)")" ]] ; then
    echo "$APP $(< $PID_FILE) is not currently running."
  else
    PID=$(< $PID_FILE)
    PGID=`ps x -o  "%p %r %y %x %c " | grep $PID | awk '{print $2}'`
    echo "Sending KILL signal to $APP $PID via process group $PGID"
    kill -KILL -$PGID

    echo -n "Wait for process $PID to stop..."
    for i in {1..10} ; do
      kill -0 -$PGID >/dev/null 2>&1
      if [ $? != 0 ] ; then
        rm -f $PID_FILE
        break
      fi
      if (( $i > 3 )) ; then
        echo -n .
      fi
      sleep 1
    done
    kill -0 -$PGID >/dev/null 2>&1
    if [ $? == 0 ] ; then
      echo "FAILED!"
      PGID=`ps x -o  "%p %r %y %x %c " | grep $PID | awk '{print $2}'`
      echo "Sending KILL signal to $APP $PID via process group $PGID"
      kill -KILL -$PGID
    else
      echo "OK"
    fi
  fi
}

function restart() {
  if status ; then
    bundle exec pumactl --pidfile $PID_FILE phased-restart
  else
    stop
    start
  fi
}

function status() {
  if [ -f $PID_FILE ] ; then
    PID=`cat $PID_FILE`
    kill -0 $PID >/dev/null 2>&1
    running_status=$?
    if [ $running_status == 0 ] ; then
      echo $APP is running as $PID
      return 0
    else
      echo $APP $PID is dead!
      return 2
    fi
  else
    echo $APP is stopped.
    return 1
  fi
}

function usage() {
  cat <<EOF
Usage: $0 <command>

* where <command> is one of:
  start         start an instance of the application
  stop          stop all instances of the application
  restart       stop all instances and restart them afterwards
  status        show application status
EOF

}

CMD=$1
shift

case "$CMD" in
  "start")
    start
    ;;
  "stop")
	stop
    ;;
  "restart")
    restart
    ;;
  "status")
    status
  ;;
  "usage"|*)
    usage
    exit 1
    ;;
esac
